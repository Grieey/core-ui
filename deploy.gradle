apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply from: '../versions.gradle'

ext {
    // bintray组织，没有创建就是你自己的id
    bintrayOrganisation = 'grieey'
    // 发布者id
    publishedGroupId = 'com.github.grieey.core'
    // 开发者信息
    developerId = 'grieey'
    developerName = 'grieey'
    developerEmail = 'yangq433520@gmail.com'
    // 证书信息
    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

def loadVersion() {
    def properties = new Properties()
    def file = file('../libversions.properties')
    properties.load(file.newDataInputStream())
    return properties['ARTIFACT_VERSION']
}

group = publishedGroupId
version = loadVersion()

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getOrDefault("bintray.user", System.getenv('BINTRAY_USER'))
    key = properties.getOrDefault("bintray.apikey", System.getenv('BINTRAY_API_KEY'))

    configurations = ['archives']
    pkg {
        userOrg = bintrayOrganisation
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}

def updateVersion(int type) {
    def properties = new Properties()
    def file = file('../libversions.properties')
    properties.load(file.newDataInputStream())
    def SEPARATOR = '.'
    def (majorCode, minjorCode, amendmentCode) = properties['ARTIFACT_VERSION'].tokenize(SEPARATOR)

    switch (type) {
        case updateType.major:
            majorCode++
            minjorCode = 0
            amendmentCode = 0
            break
        case updateType.minjor:
            minjorCode++
            amendmentCode = 0
            break
        default:
            amendmentCode++
    }

    properties['ARTIFACT_VERSION'] = majorCode + SEPARATOR + minjorCode + SEPARATOR + amendmentCode
    println 'updateVersionTo ' + properties['ARTIFACT_VERSION'] + ' successed'
    properties.store(file.newWriter(), null)
}

// 更新主版本
task updateMajorVersion() {

    doFirst {
        updateVersion(updateType.major)
    }

    doLast {
        version = loadVersion()
    }
}

// 更新次版本
task updateMinjorVersion() {

    doFirst {
        updateVersion(updateType.minjor)
    }

    doLast {
        version = loadVersion()
    }
}

// 更新修正版本
task updateAmendmentVersion() {

    doFirst {
        updateVersion(updateType.amendment)
    }

    doLast {
        project.version = loadVersion()
    }
}

task releaseAmendment(dependsOn: ['clean', 'updateAmendmentVersion', 'bintrayUpload'])
updateAmendmentVersion.mustRunAfter clean
bintrayUpload.mustRunAfter updateAmendmentVersion

task releaseMinjor(dependsOn: ['clean', 'updateMinjorVersion', 'bintrayUpload'])
updateMinjorVersion.mustRunAfter clean
bintrayUpload.mustRunAfter updateMinjorVersion

task releaseMajor(dependsOn: ['clean', 'updateMajorVersion', 'bintrayUpload'])
updateMajorVersion.mustRunAfter clean
bintrayUpload.mustRunAfter updateMajorVersion